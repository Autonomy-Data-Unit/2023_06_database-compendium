[
  {
    "objectID": "insolvency_stats_scrapers.html",
    "href": "insolvency_stats_scrapers.html",
    "title": "Scrape The Most up-to-date Monthly Insolvency Statistics",
    "section": "",
    "text": "The purpose of these functions is to - Find and read the most recent monthly insolvency statistics file - Read each of the sheets in the file into a dataframe - Get a long and short description of the data - Collect the unique column values from the dataframes - Find the date of the most recent data available\n\n\nget_insolvency_stats\n\n get_insolvency_stats ()\n\nFind the most up to date monthly insolvency statistics and fetch the url so it can be used to collect the .xlsx file.\nOpen the webpage and read the HTML. Find the .xlsx file by searching through the  elements. (we know it’s in an  element as this is how links are defined in HTML)\nReturns a dictionary where the keys are the sheet names and the values are dataframes containing the sheet data.\n\ninsolvency_stats, long_desc = get_insolvency_stats()\nprint('Title: ' + list(insolvency_stats.keys())[0])\nprint('Description: ' + long_desc[29:276])\n\nTitle: Table 1: Registered Company insolvencies, England and Wales, 1 January 2019 to 31 May 2023, not seasonally adjusted [p][note 1][note 2]\nDescription: \nThe Insolvency Service is currently releasing monthly company and individual insolvency statistics for England & Wales and Northern Ireland, and monthly company statistics for Scotland, to provide more up to date information on insolvency volumes\n\n\n\nlist(insolvency_stats.values())[0].head(3)\n\n\n\n\n\n\n\n4\nMonth\nTotal company insolvencies\nTotal company insolvencies revised?\nCompulsory liquidations [note 3]\nCompulsory liquidations revised?\nCreditors' voluntary liquidations [note 4]\nCreditors' voluntary liquidations revised?\nAdministrations\nAdministrations revised?\nCompany voluntary arrangements\nCompany voluntary arrangements revised?\nReceivership appointments\nReceivership appointments revised?\n\n\n\n\n5\nJan 19\n1726\nNaN\n317\nNaN\n1171\nNaN\n196\nNaN\n42\nNaN\n0\nNaN\n\n\n6\nFeb 19\n1213\nNaN\n259\nNaN\n806\nNaN\n125\nNaN\n23\nNaN\n0\nNaN\n\n\n7\nMar 19\n1581\nNaN\n238\nNaN\n1139\nNaN\n175\nNaN\n29\nNaN\n0\nNaN\n\n\n\n\n\n\n\n\n\n\nget_insolvency_unique_column_vals\n\n get_insolvency_unique_column_vals (data)\n\nGiven a dataframe, this function finds the unique column values\n\n\n\nget_mis_last_updated\n\n get_mis_last_updated ()\n\nGets the publish date of the most up to date insolvency data\n\nget_mis_last_updated()\n\n'16 June 2023'\n\n\n\n\n\nget_mis_description\n\n get_mis_description ()\n\nGets a short description of the insolvency statistics dataset\n\nget_mis_description()\n\n'Monthly company and individual insolvency statistics for England & Wales, and Northern Ireland, as well as company insolvency statistics for Scotland. Breathing Space scheme statistics and numbers of company moratoriums and restructuring plans are also included.'"
  },
  {
    "objectID": "police_data_api_scrapers.html",
    "href": "police_data_api_scrapers.html",
    "title": "Scrape Data from the Police Data API",
    "section": "",
    "text": "get_constituency_coordinates\n\n get_constituency_coordinates ()\n\nThis function was created to make it easier to search the police data api using poly areas rather than a small area around a single coordinate.\nReturns a dictionary containing very low level poly areas (as a string) which outline a constituency. The keys are the constituency names.\n\nconstituency_coords = get_constituency_coordinates()\nconstituency_coords['Bethnal Green and Bow']\n\n'51.543,-0.017:51.517,-0.034:51.531,-0.066:51.536,-0.044'\n\n\n\n\n\nget_street_level_crimes\n\n get_street_level_crimes (location={'lat': 0, 'lng': 0}, date='2023-01',\n                          loctype='')\n\nWon’t work if there are more than 10000 crimes in the requested area.\nLocation by default needs to be entered as follows: {‘lat’: 51.510, ‘lng’: -0.118} which corresponds to Central London.\nThe poly area uses lat/lng pairs to define the boundary. For the poly area to work the location must be entered as a string in the form [lat],[lng]:[lat],[lng]:[lat],[lng]. For example: ‘51.543,-0.017:51.517,-0.034:51.531,-0.066:51.536,-0.044’\nFunction returns a list of the crimes from a given month within a 1 mile radius of the location given or within a poly area and the date the data was last updated. The last updated is the same for the street level crimes with no locations data as it is all updated at the same time.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nlocation\ndict\n{‘lat’: 0, ‘lng’: 0}\nLocation needs to be entered as a dictionary.\n\n\ndate\nstr\n2023-01\nDate should only include year and month (yyyy-mm) as a string.\n\n\nloctype\nstr\n\nEnter poly if using a poly area, leave blank otherwise.\n\n\n\n\n# Search for street level crimes in Bethnal Green and Bow during March 2023 \n# Show info for the first crime in the list \nslc, last_updated = get_street_level_crimes(constituency_coords['Bethnal Green and Bow'], '2023-03', 'poly')\nprint('Last updated: ' + last_updated)\nslc[0]\n\nLast updated: 2023-04-01\n\n\n{'category': 'anti-social-behaviour',\n 'location_type': 'Force',\n 'location': {'latitude': '51.533111',\n  'street': {'id': 1690539, 'name': 'On or near Sewardstone Road'},\n  'longitude': '-0.048998'},\n 'context': '',\n 'outcome_status': None,\n 'persistent_id': '',\n 'id': 108935856,\n 'location_subtype': '',\n 'month': '2023-03'}\n\n\n\n\n\nget_police_forces\n\n get_police_forces ()\n\nReturns a list of the police forces in the UK. These are used in the no_loc functions. The user can search the list for the relevant force for the area they want to collect data for.\n\nget_police_forces()[0]\n\n'avon-and-somerset'\n\n\n\n\n\nget_crimes_no_loc\n\n get_crimes_no_loc (force, date)\n\nFunction to get crimes that don’t have a location and therefore we have to search by police force. The date should be a string in the form ‘yyyy-mm’.\n\nget_crimes_no_loc('avon-and-somerset', '2023-01')[0]\n\n{'category': 'bicycle-theft',\n 'location_type': None,\n 'location': None,\n 'context': '',\n 'outcome_status': {'category': 'Under investigation', 'date': '2023-01'},\n 'persistent_id': '3b3b26b5343b778bacc7d3565ab41dd25283dddf0ed5df2ae59e517642454f82',\n 'id': 107605028,\n 'location_subtype': '',\n 'month': '2023-01'}\n\n\n\n\n\nget_stop_searches\n\n get_stop_searches (location={'lat': 0, 'lng': 0}, date='2023-01',\n                    loctype='')\n\nGets a list of the stop and searches carried out at the specified location and date.\nThe arguments follow the same format as the get_street_level_crimes function.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nlocation\ndict\n{‘lat’: 0, ‘lng’: 0}\nLocation needs to be entered as a dictionary.\n\n\ndate\nstr\n2023-01\nDate should only include year and month (yyyy-mm) as a string.\n\n\nloctype\nstr\n\nEnter poly if using a poly area, leave blank otherwise.\n\n\n\n\n# Search for stop and searches in Bethnal Green and Bow during March 2023 \n# Show info for the first crime in the list \nss, last_updated = get_stop_searches(constituency_coords['Bethnal Green and Bow'], '2023-03', 'poly')\nprint('Last updated: ' + last_updated)\nslc[0]\n\nLast updated: 2023-04\n\n\n{'category': 'anti-social-behaviour',\n 'location_type': 'Force',\n 'location': {'latitude': '51.533111',\n  'street': {'id': 1690539, 'name': 'On or near Sewardstone Road'},\n  'longitude': '-0.048998'},\n 'context': '',\n 'outcome_status': None,\n 'persistent_id': '',\n 'id': 108935856,\n 'location_subtype': '',\n 'month': '2023-03'}\n\n\n\n\n\nget_searches_no_loc\n\n get_searches_no_loc (force, date)\n\nFunction to get stop and searches that don’t have a location and therefore we have to search by police force\n\nget_searches_no_loc('bedfordshire', '2023-01')[0]\n\n{'age_range': '18-24',\n 'outcome': 'A no further action disposal',\n 'involved_person': True,\n 'self_defined_ethnicity': 'Other ethnic group - Any other ethnic group',\n 'gender': 'Male',\n 'legislation': 'Misuse of Drugs Act 1971 (section 23)',\n 'outcome_linked_to_object_of_search': None,\n 'datetime': '2023-01-18T06:04:18+00:00',\n 'removal_of_more_than_outer_clothing': False,\n 'outcome_object': {'id': 'bu-no-further-action',\n  'name': 'A no further action disposal'},\n 'location': None,\n 'operation': False,\n 'officer_defined_ethnicity': 'Asian',\n 'type': 'Person search',\n 'operation_name': None,\n 'object_of_search': 'Controlled drugs'}\n\n\n\n\n\nget_unique_col_vals\n\n get_unique_col_vals (data)\n\nTakes a json input converts to a dataframe and returns the column titles and unique values.\n\n# Looking for the categories and unique values from the first 10 stop and searches\nget_unique_col_vals(ss[:10])\n\n{'outcome': ['A no further action disposal', 'Arrest'],\n 'gender': ['Male'],\n 'legislation': ['Misuse of Drugs Act 1971 (section 23)',\n  'Police and Criminal Evidence Act 1984 (section 1)'],\n 'officer_defined_ethnicity': ['White', 'Black', 'Asian'],\n 'type': ['Person search', 'Person and Vehicle search'],\n 'object_of_search': ['Controlled drugs', 'Stolen goods'],\n 'outcome_object.id': ['bu-no-further-action', 'bu-arrest'],\n 'outcome_object.name': ['A no further action disposal', 'Arrest']}"
  },
  {
    "objectID": "nomis_scraper_functions.html",
    "href": "nomis_scraper_functions.html",
    "title": "Scrape Data from the Nomis API",
    "section": "",
    "text": "Automatically get a list of datasets available via the API and their descriptions\nGet the date each dataset was last updated\nGet the unique parameters for each dataset\n\n\n\nget_nomis_datasets_titles_descriptions\n\n get_nomis_datasets_titles_descriptions ()\n\nFunction to get the names and descriptions of all the datasets available via the Nomis api.\nNote: Unfortunately the Nomis api requires we specify the parameters (such as geography, age, sex, etc) in order to form a uri and download a dataset. These parameters change depending on the data we are dealing with making automation very difficult.\n\ntitles, descriptions = get_nomis_datasets_titles_descriptions()\nprint('Title: ' + titles[0] + '\\n' + 'Description: ' + descriptions[0])\n\nTitle: Jobseeker's Allowance with rates and proportions\nDescription: Records the number of people claiming Jobseeker's Allowance (JSA) and National Insurance credits at Jobcentre Plus local offices. This is not an official measure of unemployment, but is the only indicative statistic available for areas smaller than Local Authorities.\n\n\n\n\n\nget_nomis_last_updated\n\n get_nomis_last_updated ()\n\nGet the date the each dataset was last updated on. If no date exists then set value to None.\n\n# Show the first date in the list\nget_nomis_last_updated()[0]\n\n'2023-06-13 07:00:00'\n\n\n\n\n\nget_nomis_datasets_parameters\n\n get_nomis_datasets_parameters ()\n\nFunction to collect the IDs and parameters for each dataset on the Nomis API.\nHow does it work? Every dataset has parameter categories e.g. geography, sex, age. Each of these categories then has various parameters e.g. age - 0-12, 13-25, etc. To get the parameters we must first loop through every dataset and collect the parameter categories and the IDs. Using the IDs (unique to each dataset) to specify the dataset and the categories we can then get the available parameters specific to each dataset. These are saved to a dictionary with the keys being the parameter categories and the values being the parameters.\n\nparams = get_nomis_datasets_parameters()\nparams[0]\n\n{'GEOGRAPHY': ['United Kingdom',\n  'Great Britain',\n  'England',\n  'Wales',\n  'Scotland',\n  'Northern Ireland',\n  'England and Wales'],\n 'SEX': ['Male', 'Female', 'Total'],\n 'ITEM': ['Total claimants',\n  'Students on vacation',\n  'Temporarily stopped',\n  'Claimants under 18 years',\n  'Married females'],\n 'MEASURES': ['claimants', 'workforce', 'active', 'residence'],\n 'FREQ': ['Monthly', 'Quarterly', 'Half-yearly, semester', 'Annually']}"
  },
  {
    "objectID": "nhs_quality&outcomes_scrapers.html",
    "href": "nhs_quality&outcomes_scrapers.html",
    "title": "Scrape Data from the NHS Quality and Outcomes Framework",
    "section": "",
    "text": "The purpose of these functions is to - Find and read the most recent NHS Quality and Outcomes file - Read each of the sheets in the file into a dataframe - Collect the unique column values from the dataframes\n\nsource\n\nget_NHS_qualityOutcomes\n\n get_NHS_qualityOutcomes ()\n\nFind the link of the most recent dataset and download data at national level.\n\nNHS_quality_outcomes = get_NHS_qualityOutcomes()\nprint('Title: ' + list(NHS_quality_outcomes.keys())[0][9:])\n\nTitle: Prevalence, achievement and personalised care adjustments, cardiovascular group, atrial fibrillation, 2021-22, region and national level\n\n\n\nNHS_quality_outcomes[list(NHS_quality_outcomes.keys())[0]].head(3)\n\n\n\n\n\n\n\n\nRegion ODS code\nRegion ONS code\nRegion name\nNumber of practices\nList size\nRegister\nPrevalence (%)\nNumber of practices\nList size\nRegister\n...\nDenominator plus PCAs\nPatients receiving Intervention (%)\nAchievement Score (max 25)\nNumerator\nDenominator\nUnderlying Achievement net of PCAs (%)\nPCAs\nPCA Rate (%)\nDenominator plus PCAs\nPatients receiving Intervention (%)\n\n\n\n\n0\nENG\nE92000001\nEngland\n6460\n60037519\n1230460\n2.049485\n6470\n61604213\n1288599\n...\n557688\n86.154086\n161245.58\n948937\n1027297\n92.372216\n38850\n3.643963\n1066147\n89.006206\n\n\n1\nY56\nE40000003\nLondon\n1174\n10239440\n113999\n1.113332\n1178\n10644873\n119035\n...\n51689\n86.927586\n29209.21\n84343\n93253\n90.445348\n3680\n3.796437\n96933\n87.011647\n\n\n2\nY58\nE40000006\nSouth West\n552\n5823756\n154294\n2.64939\n552\n5999796\n163087\n...\n66873\n83.695961\n13800\n119527\n129371\n92.390876\n5437\n4.033143\n134808\n88.664619\n\n\n\n\n3 rows × 42 columns\n\n\n\n\nsource\n\n\nget_qualityOutcomes_uniqueColumnValues\n\n get_qualityOutcomes_uniqueColumnValues (data)\n\nReturns the unique, non-numeric column values given a dataframe\n\n# Get the unique column values from the first sheet\nsheet = NHS_quality_outcomes[list(NHS_quality_outcomes.keys())[0]]\nget_qualityOutcomes_uniqueColumnValues(sheet)\n\n{'Region ODS code': array(['ENG', 'Y56', 'Y58', 'Y59', 'Y60', 'Y61', 'Y62', 'Y63'],\n       dtype=object),\n 'Region ONS code': array(['E92000001', 'E40000003', 'E40000006', 'E40000005', 'E40000011',\n        'E40000007', 'E40000010', 'E40000012'], dtype=object),\n 'Region name': array(['England', 'London', 'South West', 'South East', 'Midlands',\n        'East of England', 'North West', 'North East and Yorkshire'],\n       dtype=object)}"
  },
  {
    "objectID": "ons_scraper_functions.html",
    "href": "ons_scraper_functions.html",
    "title": "Scrape Data from the ONS API",
    "section": "",
    "text": "Automatically download datasets metadata from the ONS\nGet the titles of each dataset\nFind a description\nGet the column titles\n\nAuthor: Rowan Trickett\nDate: 13/04/2023\nLast updated: 24/04/2023\n\n\nget_ONS_datasets_titles_descriptions\n\n get_ONS_datasets_titles_descriptions ()\n\nLoad ONS api and loop through all available datasets collecting their titles and a short description.\n\ntitles, descriptions = get_ONS_datasets_titles_descriptions()\nprint('Title: ' + titles[0] + '\\n' + 'Description: ' + descriptions[0])\n\nTitle: Quarterly personal well-being estimates\nDescription: Seasonally and non seasonally-adjusted quarterly estimates of life satisfaction, feeling that the things done in life are worthwhile, happiness and anxiety in the UK.\n\n\n\n\n\nget_ONS_datasets_urls\n\n get_ONS_datasets_urls ()\n\nLoads ONS api and loops through collecting their urls (that can be used to download a csv file of each one).\n\n# The url for the first dataset in the list\nget_ONS_datasets_urls()[0]\n\n'https://api.beta.ons.gov.uk/v1/datasets/wellbeing-quarterly/editions/time-series/versions/7'\n\n\n\n\n\nfind_ONS_cols\n\n find_ONS_cols (url)\n\nFinding the csv download link for a specific dataset.\n\nurl = 'https://api.beta.ons.gov.uk/v1/datasets/wellbeing-quarterly/editions/time-series/versions/7'\nfind_ONS_cols(url)\n\n['v4_2',\n 'LCL',\n 'UCL',\n 'yyyy-qq',\n 'Time',\n 'uk-only',\n 'Geography',\n 'measure-of-wellbeing',\n 'MeasureOfWellbeing',\n 'wellbeing-estimate',\n 'Estimate',\n 'seasonal-adjustment',\n 'SeasonalAdjustment']\n\n\n\n\n\nget_ONS_long_description\n\n get_ONS_long_description ()\n\nGetting a long description from the Quality and Methodology (QMI) page for all datasets available via the ONS api.\n\n# One sentence from the first of the long descriptions\nget_ONS_long_description()[0][522:648]\n\n'To collect this data Office for National Statistics (ONS) asks people in the UK to rate their well-being on an 11-point scale.'"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "database_compendium",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "database_compendium",
    "section": "Install",
    "text": "Install\npip install database_compendium"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "database_compendium",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  }
]