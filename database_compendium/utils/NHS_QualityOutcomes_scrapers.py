# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/04_NHS_Quality&Outcomes_scrapers.ipynb.

# %% auto 0
__all__ = ['get_NHS_qualityOutcomes', 'get_qualityOutcomes_uniqueColumnValues']

# %% ../../nbs/04_NHS_Quality&Outcomes_scrapers.ipynb 4
import requests
from bs4 import BeautifulSoup
import pandas as pd

# %% ../../nbs/04_NHS_Quality&Outcomes_scrapers.ipynb 5
def get_NHS_qualityOutcomes():
    """
    Find the link of the most recent dataset and download data at national
    level.
    """
    base_url = 'https://digital.nhs.uk'
    url = base_url + '/data-and-information/publications/statistical/quality-and-outcomes-framework-achievement-prevalence-and-exceptions-data'
    
    # Find link to latest dataset
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    latest_dataset_url_ending = soup.find_all('div', {'id': 'latest-statistics'})[0].findChildren('a')[0]['href']
    latest_dataset_url = base_url + latest_dataset_url_ending
    
    # find latest dataset file
    response = requests.get(latest_dataset_url)
    soup = BeautifulSoup(response.text, 'html.parser')
    file_download_link = soup.find('div', {'id': 'resources'}).find_all('a')[0]['href']
    
    r = requests.get(file_download_link)
    file = pd.ExcelFile(r.content)
    
    dfs = {}
    for sheet in file.sheet_names[1:]:  # Ignore the first sheet as it just contains a list of titles for the other sheets
        title = file.parse(sheet).iloc[6, 0] # Table title is on the 6th row for every table
        
        """ 
        Each table has the same number of rows, which makes this much easier, however, this only works for the national 
        level excel file (rows correspond to regions)
        """
        temp_df = file.parse(sheet)[10:19].reset_index(drop=True)
        temp_df.columns = temp_df.iloc[0]
        dfs[title] = temp_df.iloc[1:].reset_index(drop=True) # save as df in dictionary

    return dfs

# %% ../../nbs/04_NHS_Quality&Outcomes_scrapers.ipynb 8
def get_qualityOutcomes_uniqueColumnValues(data):
    "Returns the unique, non-numeric column values given a dataframe"
    unq_cols = {}
    for i in range(len(data)):
        col_name = data.iloc[:, i].name
        if type((data.iloc[:, i])[0]) == str:
            unq_cols[col_name] = data.iloc[:, i].unique()
    return unq_cols
