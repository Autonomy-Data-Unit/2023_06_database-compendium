# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/0x_Embeddings_analysis.ipynb.

# %% auto 0
__all__ = ['cos_similarity', 'svm_similarity']

# %% ../nbs/0x_Embeddings_analysis.ipynb 9
def cos_similarity(data, # Dataset as a dataframe that we want to use to compare rows
                   compare_row=0, # The row in the dataset that will be compared with all the others
                   num=10): # The number of similar datasets that will be returned (in descending order)

    """Using cosine similarity to find the most closely related datasets"""

    if type(data.iloc[0, 0]) == str:
        labels = data.iloc[:, 0]
        vectors = data.iloc[:, 1:]
    else:
        labels = data.index.values
        vectors = data.iloc[:, :]
        
    query = vectors.iloc[compare_row, :].values
    vectors = vectors.drop(compare_row).values
    
    """ 
    Calculate the cosine similarity between the query vector and each embedding vector
    and sort in descending order.
    
    https://github.com/karpathy/randomfun/blob/master/knn_vs_svm.ipynb
    """
    similarities = vectors.dot(query)
    sorted_ix = np.argsort(-similarities)
                           
    updated_labels = labels
    del updated_labels[compare_row]
    updated_labels = list(updated_labels)

    return [updated_labels[i] for i in sorted_ix[:num]], similarities[sorted_ix[:num]]

# %% ../nbs/0x_Embeddings_analysis.ipynb 11
def svm_similarity(data, # Dataset as a dataframe that we want to use to compare rows
                   compare_row=0, # The row in the dataset that will be compared with all the others
                   num=10): # The number of similar datasets that will be returned (in descending order)

    """Using SVM to find the most closley related datasets"""

    from sklearn import svm
    
    if type(data.iloc[0, 0]) == str:
        labels = data.iloc[:, 0]
        vectors = data.iloc[:, 1:]
    else:
        labels = data.index.values
        vectors = data.iloc[:, :]
    
    target = np.zeros(len(vectors))
    target[compare_row] = 1
    
    clf = svm.LinearSVC(class_weight='balanced', verbose=False, 
                        max_iter=10000, tol=1e-6, C=1)
    clf.fit(vectors, target)
    
    similarities = clf.decision_function(vectors)
    sorted_ix = np.argsort(-similarities)
    
    updated_labels = labels
    del updated_labels[compare_row]
    updated_labels = list(updated_labels)
    
    return [updated_labels[i] for i in sorted_ix[:num]], similarities[sorted_ix[:num]]
