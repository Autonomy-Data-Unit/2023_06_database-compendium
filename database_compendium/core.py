# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_matching_columns.ipynb.

# %% auto 0
__all__ = ['find_identical_cols']

# %% ../nbs/06_matching_columns.ipynb 8
def find_identical_cols(cols_list, compare_idx):
    """
    Function to find the column titles of datasets that are identical to those
    in the dataset to be compared with.


    The index of the list must be used
    - To find the index of a named dataset we can simply search for the name in 
    the metadata_df and find its corresponding index
    """

    dataset_to_compare = compare_idx

    comp_cols = cols_list[dataset_to_compare]
    comp_cols = [s.strip() for s in comp_cols]
    updated_cols_list = cols_list[:]
    updated_cols_list.pop(dataset_to_compare)

    identical_cols = []
    pattern = re.compile(r"v\d+_\d+") # we want to remove strings in the form vX_Y
    for cl in updated_cols_list:

        # Clean list
        temp_cl = [s.strip() for s in cl]
        temp_cl = [s for s in temp_cl if not pattern.match(s)]

        # Add a list of strings that match from both comp_cols and temp_cl
        identical_cols.append(list(set(comp_cols) & set(temp_cl)))

    return identical_cols
